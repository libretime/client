<?php
/**
 * File
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Libretime\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LibreTime API
 *
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Libretime\Client\Model;

use \ArrayAccess;
use \Libretime\Client\ObjectSerializer;

/**
 * File Class Doc Comment
 *
 * @category Class
 * @package  Libretime\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class File implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'File';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'import_status' => '\Libretime\Client\Model\FileImportStatusEnum',
        'filepath' => 'string',
        'size' => 'int',
        'exists' => 'bool',
        'mime' => 'string',
        'md5' => 'string',
        'hidden' => 'bool',
        'accessed' => 'int',
        'scheduled' => 'bool',
        'part_of_list' => 'bool',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'last_played_at' => '\DateTime',
        'bit_rate' => 'int',
        'sample_rate' => 'int',
        'format' => 'string',
        'channels' => 'int',
        'length' => 'string',
        'bpm' => 'int',
        'replay_gain' => 'float',
        'cue_in' => 'string',
        'cue_out' => 'string',
        'name' => 'string',
        'description' => 'string',
        'artwork' => 'string',
        'artist_name' => 'string',
        'artist_url' => 'string',
        'original_artist' => 'string',
        'album_title' => 'string',
        'track_title' => 'string',
        'genre' => 'string',
        'mood' => 'string',
        'date' => 'string',
        'track_number' => 'int',
        'disc_number' => 'string',
        'comment' => 'string',
        'language' => 'string',
        'label' => 'string',
        'copyright' => 'string',
        'composer' => 'string',
        'conductor' => 'string',
        'orchestra' => 'string',
        'encoder' => 'string',
        'encoded_by' => 'string',
        'isrc' => 'string',
        'lyrics' => 'string',
        'lyricist' => 'string',
        'original_lyricist' => 'string',
        'subject' => 'string',
        'contributor' => 'string',
        'rating' => 'string',
        'url' => 'string',
        'info_url' => 'string',
        'audio_source_url' => 'string',
        'buy_this_url' => 'string',
        'catalog_number' => 'string',
        'radio_station_name' => 'string',
        'radio_station_url' => 'string',
        'report_datetime' => 'string',
        'report_location' => 'string',
        'report_organization' => 'string',
        'library' => 'int',
        'owner' => 'int',
        'edited_by' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'import_status' => null,
        'filepath' => null,
        'size' => null,
        'exists' => null,
        'mime' => null,
        'md5' => null,
        'hidden' => null,
        'accessed' => null,
        'scheduled' => null,
        'part_of_list' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'last_played_at' => 'date-time',
        'bit_rate' => null,
        'sample_rate' => null,
        'format' => null,
        'channels' => null,
        'length' => null,
        'bpm' => null,
        'replay_gain' => 'decimal',
        'cue_in' => null,
        'cue_out' => null,
        'name' => null,
        'description' => null,
        'artwork' => null,
        'artist_name' => null,
        'artist_url' => null,
        'original_artist' => null,
        'album_title' => null,
        'track_title' => null,
        'genre' => null,
        'mood' => null,
        'date' => null,
        'track_number' => null,
        'disc_number' => null,
        'comment' => null,
        'language' => null,
        'label' => null,
        'copyright' => null,
        'composer' => null,
        'conductor' => null,
        'orchestra' => null,
        'encoder' => null,
        'encoded_by' => null,
        'isrc' => null,
        'lyrics' => null,
        'lyricist' => null,
        'original_lyricist' => null,
        'subject' => null,
        'contributor' => null,
        'rating' => null,
        'url' => null,
        'info_url' => null,
        'audio_source_url' => null,
        'buy_this_url' => null,
        'catalog_number' => null,
        'radio_station_name' => null,
        'radio_station_url' => null,
        'report_datetime' => null,
        'report_location' => null,
        'report_organization' => null,
        'library' => null,
        'owner' => null,
        'edited_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'import_status' => false,
        'filepath' => true,
        'size' => false,
        'exists' => true,
        'mime' => false,
        'md5' => true,
        'hidden' => true,
        'accessed' => false,
        'scheduled' => true,
        'part_of_list' => true,
        'created_at' => true,
        'updated_at' => true,
        'last_played_at' => true,
        'bit_rate' => true,
        'sample_rate' => true,
        'format' => true,
        'channels' => true,
        'length' => true,
        'bpm' => true,
        'replay_gain' => true,
        'cue_in' => true,
        'cue_out' => true,
        'name' => false,
        'description' => true,
        'artwork' => true,
        'artist_name' => true,
        'artist_url' => true,
        'original_artist' => true,
        'album_title' => true,
        'track_title' => true,
        'genre' => true,
        'mood' => true,
        'date' => true,
        'track_number' => true,
        'disc_number' => true,
        'comment' => true,
        'language' => true,
        'label' => true,
        'copyright' => true,
        'composer' => true,
        'conductor' => true,
        'orchestra' => true,
        'encoder' => true,
        'encoded_by' => true,
        'isrc' => true,
        'lyrics' => true,
        'lyricist' => true,
        'original_lyricist' => true,
        'subject' => true,
        'contributor' => true,
        'rating' => true,
        'url' => true,
        'info_url' => true,
        'audio_source_url' => true,
        'buy_this_url' => true,
        'catalog_number' => true,
        'radio_station_name' => true,
        'radio_station_url' => true,
        'report_datetime' => true,
        'report_location' => true,
        'report_organization' => true,
        'library' => true,
        'owner' => true,
        'edited_by' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'import_status' => 'import_status',
        'filepath' => 'filepath',
        'size' => 'size',
        'exists' => 'exists',
        'mime' => 'mime',
        'md5' => 'md5',
        'hidden' => 'hidden',
        'accessed' => 'accessed',
        'scheduled' => 'scheduled',
        'part_of_list' => 'part_of_list',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'last_played_at' => 'last_played_at',
        'bit_rate' => 'bit_rate',
        'sample_rate' => 'sample_rate',
        'format' => 'format',
        'channels' => 'channels',
        'length' => 'length',
        'bpm' => 'bpm',
        'replay_gain' => 'replay_gain',
        'cue_in' => 'cue_in',
        'cue_out' => 'cue_out',
        'name' => 'name',
        'description' => 'description',
        'artwork' => 'artwork',
        'artist_name' => 'artist_name',
        'artist_url' => 'artist_url',
        'original_artist' => 'original_artist',
        'album_title' => 'album_title',
        'track_title' => 'track_title',
        'genre' => 'genre',
        'mood' => 'mood',
        'date' => 'date',
        'track_number' => 'track_number',
        'disc_number' => 'disc_number',
        'comment' => 'comment',
        'language' => 'language',
        'label' => 'label',
        'copyright' => 'copyright',
        'composer' => 'composer',
        'conductor' => 'conductor',
        'orchestra' => 'orchestra',
        'encoder' => 'encoder',
        'encoded_by' => 'encoded_by',
        'isrc' => 'isrc',
        'lyrics' => 'lyrics',
        'lyricist' => 'lyricist',
        'original_lyricist' => 'original_lyricist',
        'subject' => 'subject',
        'contributor' => 'contributor',
        'rating' => 'rating',
        'url' => 'url',
        'info_url' => 'info_url',
        'audio_source_url' => 'audio_source_url',
        'buy_this_url' => 'buy_this_url',
        'catalog_number' => 'catalog_number',
        'radio_station_name' => 'radio_station_name',
        'radio_station_url' => 'radio_station_url',
        'report_datetime' => 'report_datetime',
        'report_location' => 'report_location',
        'report_organization' => 'report_organization',
        'library' => 'library',
        'owner' => 'owner',
        'edited_by' => 'edited_by'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'import_status' => 'setImportStatus',
        'filepath' => 'setFilepath',
        'size' => 'setSize',
        'exists' => 'setExists',
        'mime' => 'setMime',
        'md5' => 'setMd5',
        'hidden' => 'setHidden',
        'accessed' => 'setAccessed',
        'scheduled' => 'setScheduled',
        'part_of_list' => 'setPartOfList',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'last_played_at' => 'setLastPlayedAt',
        'bit_rate' => 'setBitRate',
        'sample_rate' => 'setSampleRate',
        'format' => 'setFormat',
        'channels' => 'setChannels',
        'length' => 'setLength',
        'bpm' => 'setBpm',
        'replay_gain' => 'setReplayGain',
        'cue_in' => 'setCueIn',
        'cue_out' => 'setCueOut',
        'name' => 'setName',
        'description' => 'setDescription',
        'artwork' => 'setArtwork',
        'artist_name' => 'setArtistName',
        'artist_url' => 'setArtistUrl',
        'original_artist' => 'setOriginalArtist',
        'album_title' => 'setAlbumTitle',
        'track_title' => 'setTrackTitle',
        'genre' => 'setGenre',
        'mood' => 'setMood',
        'date' => 'setDate',
        'track_number' => 'setTrackNumber',
        'disc_number' => 'setDiscNumber',
        'comment' => 'setComment',
        'language' => 'setLanguage',
        'label' => 'setLabel',
        'copyright' => 'setCopyright',
        'composer' => 'setComposer',
        'conductor' => 'setConductor',
        'orchestra' => 'setOrchestra',
        'encoder' => 'setEncoder',
        'encoded_by' => 'setEncodedBy',
        'isrc' => 'setIsrc',
        'lyrics' => 'setLyrics',
        'lyricist' => 'setLyricist',
        'original_lyricist' => 'setOriginalLyricist',
        'subject' => 'setSubject',
        'contributor' => 'setContributor',
        'rating' => 'setRating',
        'url' => 'setUrl',
        'info_url' => 'setInfoUrl',
        'audio_source_url' => 'setAudioSourceUrl',
        'buy_this_url' => 'setBuyThisUrl',
        'catalog_number' => 'setCatalogNumber',
        'radio_station_name' => 'setRadioStationName',
        'radio_station_url' => 'setRadioStationUrl',
        'report_datetime' => 'setReportDatetime',
        'report_location' => 'setReportLocation',
        'report_organization' => 'setReportOrganization',
        'library' => 'setLibrary',
        'owner' => 'setOwner',
        'edited_by' => 'setEditedBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'import_status' => 'getImportStatus',
        'filepath' => 'getFilepath',
        'size' => 'getSize',
        'exists' => 'getExists',
        'mime' => 'getMime',
        'md5' => 'getMd5',
        'hidden' => 'getHidden',
        'accessed' => 'getAccessed',
        'scheduled' => 'getScheduled',
        'part_of_list' => 'getPartOfList',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'last_played_at' => 'getLastPlayedAt',
        'bit_rate' => 'getBitRate',
        'sample_rate' => 'getSampleRate',
        'format' => 'getFormat',
        'channels' => 'getChannels',
        'length' => 'getLength',
        'bpm' => 'getBpm',
        'replay_gain' => 'getReplayGain',
        'cue_in' => 'getCueIn',
        'cue_out' => 'getCueOut',
        'name' => 'getName',
        'description' => 'getDescription',
        'artwork' => 'getArtwork',
        'artist_name' => 'getArtistName',
        'artist_url' => 'getArtistUrl',
        'original_artist' => 'getOriginalArtist',
        'album_title' => 'getAlbumTitle',
        'track_title' => 'getTrackTitle',
        'genre' => 'getGenre',
        'mood' => 'getMood',
        'date' => 'getDate',
        'track_number' => 'getTrackNumber',
        'disc_number' => 'getDiscNumber',
        'comment' => 'getComment',
        'language' => 'getLanguage',
        'label' => 'getLabel',
        'copyright' => 'getCopyright',
        'composer' => 'getComposer',
        'conductor' => 'getConductor',
        'orchestra' => 'getOrchestra',
        'encoder' => 'getEncoder',
        'encoded_by' => 'getEncodedBy',
        'isrc' => 'getIsrc',
        'lyrics' => 'getLyrics',
        'lyricist' => 'getLyricist',
        'original_lyricist' => 'getOriginalLyricist',
        'subject' => 'getSubject',
        'contributor' => 'getContributor',
        'rating' => 'getRating',
        'url' => 'getUrl',
        'info_url' => 'getInfoUrl',
        'audio_source_url' => 'getAudioSourceUrl',
        'buy_this_url' => 'getBuyThisUrl',
        'catalog_number' => 'getCatalogNumber',
        'radio_station_name' => 'getRadioStationName',
        'radio_station_url' => 'getRadioStationUrl',
        'report_datetime' => 'getReportDatetime',
        'report_location' => 'getReportLocation',
        'report_organization' => 'getReportOrganization',
        'library' => 'getLibrary',
        'owner' => 'getOwner',
        'edited_by' => 'getEditedBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('import_status', $data ?? [], null);
        $this->setIfExists('filepath', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('exists', $data ?? [], null);
        $this->setIfExists('mime', $data ?? [], null);
        $this->setIfExists('md5', $data ?? [], null);
        $this->setIfExists('hidden', $data ?? [], null);
        $this->setIfExists('accessed', $data ?? [], null);
        $this->setIfExists('scheduled', $data ?? [], null);
        $this->setIfExists('part_of_list', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('last_played_at', $data ?? [], null);
        $this->setIfExists('bit_rate', $data ?? [], null);
        $this->setIfExists('sample_rate', $data ?? [], null);
        $this->setIfExists('format', $data ?? [], null);
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('length', $data ?? [], null);
        $this->setIfExists('bpm', $data ?? [], null);
        $this->setIfExists('replay_gain', $data ?? [], null);
        $this->setIfExists('cue_in', $data ?? [], null);
        $this->setIfExists('cue_out', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('artwork', $data ?? [], null);
        $this->setIfExists('artist_name', $data ?? [], null);
        $this->setIfExists('artist_url', $data ?? [], null);
        $this->setIfExists('original_artist', $data ?? [], null);
        $this->setIfExists('album_title', $data ?? [], null);
        $this->setIfExists('track_title', $data ?? [], null);
        $this->setIfExists('genre', $data ?? [], null);
        $this->setIfExists('mood', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('track_number', $data ?? [], null);
        $this->setIfExists('disc_number', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('copyright', $data ?? [], null);
        $this->setIfExists('composer', $data ?? [], null);
        $this->setIfExists('conductor', $data ?? [], null);
        $this->setIfExists('orchestra', $data ?? [], null);
        $this->setIfExists('encoder', $data ?? [], null);
        $this->setIfExists('encoded_by', $data ?? [], null);
        $this->setIfExists('isrc', $data ?? [], null);
        $this->setIfExists('lyrics', $data ?? [], null);
        $this->setIfExists('lyricist', $data ?? [], null);
        $this->setIfExists('original_lyricist', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('contributor', $data ?? [], null);
        $this->setIfExists('rating', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('info_url', $data ?? [], null);
        $this->setIfExists('audio_source_url', $data ?? [], null);
        $this->setIfExists('buy_this_url', $data ?? [], null);
        $this->setIfExists('catalog_number', $data ?? [], null);
        $this->setIfExists('radio_station_name', $data ?? [], null);
        $this->setIfExists('radio_station_url', $data ?? [], null);
        $this->setIfExists('report_datetime', $data ?? [], null);
        $this->setIfExists('report_location', $data ?? [], null);
        $this->setIfExists('report_organization', $data ?? [], null);
        $this->setIfExists('library', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('edited_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if (($this->container['size'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'size', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['size'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'size', must be bigger than or equal to -2147483648.";
        }

        if ($this->container['mime'] === null) {
            $invalidProperties[] = "'mime' can't be null";
        }
        if ((mb_strlen($this->container['mime']) > 255)) {
            $invalidProperties[] = "invalid value for 'mime', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['md5']) && (mb_strlen($this->container['md5']) > 32)) {
            $invalidProperties[] = "invalid value for 'md5', the character length must be smaller than or equal to 32.";
        }

        if ($this->container['accessed'] === null) {
            $invalidProperties[] = "'accessed' can't be null";
        }
        if (($this->container['accessed'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'accessed', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['accessed'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'accessed', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['bit_rate']) && ($this->container['bit_rate'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'bit_rate', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['bit_rate']) && ($this->container['bit_rate'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'bit_rate', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['sample_rate']) && ($this->container['sample_rate'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'sample_rate', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['sample_rate']) && ($this->container['sample_rate'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'sample_rate', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['format']) && (mb_strlen($this->container['format']) > 128)) {
            $invalidProperties[] = "invalid value for 'format', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['channels']) && ($this->container['channels'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'channels', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['channels']) && ($this->container['channels'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'channels', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['bpm']) && ($this->container['bpm'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'bpm', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['bpm']) && ($this->container['bpm'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'bpm', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['replay_gain']) && !preg_match("/^-?\\d{0,6}(?:\\.\\d{0,2})?$/", $this->container['replay_gain'])) {
            $invalidProperties[] = "invalid value for 'replay_gain', must be conform to the pattern /^-?\\d{0,6}(?:\\.\\d{0,2})?$/.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 512)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['artwork']) && (mb_strlen($this->container['artwork']) > 512)) {
            $invalidProperties[] = "invalid value for 'artwork', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['artist_name']) && (mb_strlen($this->container['artist_name']) > 512)) {
            $invalidProperties[] = "invalid value for 'artist_name', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['artist_url']) && (mb_strlen($this->container['artist_url']) > 512)) {
            $invalidProperties[] = "invalid value for 'artist_url', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['original_artist']) && (mb_strlen($this->container['original_artist']) > 512)) {
            $invalidProperties[] = "invalid value for 'original_artist', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['album_title']) && (mb_strlen($this->container['album_title']) > 512)) {
            $invalidProperties[] = "invalid value for 'album_title', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['track_title']) && (mb_strlen($this->container['track_title']) > 512)) {
            $invalidProperties[] = "invalid value for 'track_title', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['genre']) && (mb_strlen($this->container['genre']) > 64)) {
            $invalidProperties[] = "invalid value for 'genre', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['mood']) && (mb_strlen($this->container['mood']) > 64)) {
            $invalidProperties[] = "invalid value for 'mood', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['date']) && (mb_strlen($this->container['date']) > 16)) {
            $invalidProperties[] = "invalid value for 'date', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['track_number']) && ($this->container['track_number'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'track_number', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['track_number']) && ($this->container['track_number'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'track_number', must be bigger than or equal to -2147483648.";
        }

        if (!is_null($this->container['disc_number']) && (mb_strlen($this->container['disc_number']) > 8)) {
            $invalidProperties[] = "invalid value for 'disc_number', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['language']) && (mb_strlen($this->container['language']) > 512)) {
            $invalidProperties[] = "invalid value for 'language', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['label']) && (mb_strlen($this->container['label']) > 512)) {
            $invalidProperties[] = "invalid value for 'label', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['copyright']) && (mb_strlen($this->container['copyright']) > 512)) {
            $invalidProperties[] = "invalid value for 'copyright', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['composer']) && (mb_strlen($this->container['composer']) > 512)) {
            $invalidProperties[] = "invalid value for 'composer', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['conductor']) && (mb_strlen($this->container['conductor']) > 512)) {
            $invalidProperties[] = "invalid value for 'conductor', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['orchestra']) && (mb_strlen($this->container['orchestra']) > 512)) {
            $invalidProperties[] = "invalid value for 'orchestra', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['encoder']) && (mb_strlen($this->container['encoder']) > 64)) {
            $invalidProperties[] = "invalid value for 'encoder', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['encoded_by']) && (mb_strlen($this->container['encoded_by']) > 255)) {
            $invalidProperties[] = "invalid value for 'encoded_by', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['isrc']) && (mb_strlen($this->container['isrc']) > 512)) {
            $invalidProperties[] = "invalid value for 'isrc', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['lyricist']) && (mb_strlen($this->container['lyricist']) > 512)) {
            $invalidProperties[] = "invalid value for 'lyricist', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['original_lyricist']) && (mb_strlen($this->container['original_lyricist']) > 512)) {
            $invalidProperties[] = "invalid value for 'original_lyricist', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['subject']) && (mb_strlen($this->container['subject']) > 512)) {
            $invalidProperties[] = "invalid value for 'subject', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['contributor']) && (mb_strlen($this->container['contributor']) > 512)) {
            $invalidProperties[] = "invalid value for 'contributor', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['rating']) && (mb_strlen($this->container['rating']) > 8)) {
            $invalidProperties[] = "invalid value for 'rating', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['url']) && (mb_strlen($this->container['url']) > 1024)) {
            $invalidProperties[] = "invalid value for 'url', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['info_url']) && (mb_strlen($this->container['info_url']) > 512)) {
            $invalidProperties[] = "invalid value for 'info_url', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['audio_source_url']) && (mb_strlen($this->container['audio_source_url']) > 512)) {
            $invalidProperties[] = "invalid value for 'audio_source_url', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['buy_this_url']) && (mb_strlen($this->container['buy_this_url']) > 512)) {
            $invalidProperties[] = "invalid value for 'buy_this_url', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['catalog_number']) && (mb_strlen($this->container['catalog_number']) > 512)) {
            $invalidProperties[] = "invalid value for 'catalog_number', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['radio_station_name']) && (mb_strlen($this->container['radio_station_name']) > 512)) {
            $invalidProperties[] = "invalid value for 'radio_station_name', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['radio_station_url']) && (mb_strlen($this->container['radio_station_url']) > 512)) {
            $invalidProperties[] = "invalid value for 'radio_station_url', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['report_datetime']) && (mb_strlen($this->container['report_datetime']) > 32)) {
            $invalidProperties[] = "invalid value for 'report_datetime', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['report_location']) && (mb_strlen($this->container['report_location']) > 512)) {
            $invalidProperties[] = "invalid value for 'report_location', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['report_organization']) && (mb_strlen($this->container['report_organization']) > 512)) {
            $invalidProperties[] = "invalid value for 'report_organization', the character length must be smaller than or equal to 512.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets import_status
     *
     * @return \Libretime\Client\Model\FileImportStatusEnum|null
     */
    public function getImportStatus()
    {
        return $this->container['import_status'];
    }

    /**
     * Sets import_status
     *
     * @param \Libretime\Client\Model\FileImportStatusEnum|null $import_status import_status
     *
     * @return self
     */
    public function setImportStatus($import_status)
    {
        if (is_null($import_status)) {
            throw new \InvalidArgumentException('non-nullable import_status cannot be null');
        }
        $this->container['import_status'] = $import_status;

        return $this;
    }

    /**
     * Gets filepath
     *
     * @return string|null
     */
    public function getFilepath()
    {
        return $this->container['filepath'];
    }

    /**
     * Sets filepath
     *
     * @param string|null $filepath filepath
     *
     * @return self
     */
    public function setFilepath($filepath)
    {
        if (is_null($filepath)) {
            array_push($this->openAPINullablesSetToNull, 'filepath');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('filepath', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['filepath'] = $filepath;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }

        if (($size > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $size when calling File., must be smaller than or equal to 2147483647.');
        }
        if (($size < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $size when calling File., must be bigger than or equal to -2147483648.');
        }

        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets exists
     *
     * @return bool|null
     */
    public function getExists()
    {
        return $this->container['exists'];
    }

    /**
     * Sets exists
     *
     * @param bool|null $exists exists
     *
     * @return self
     */
    public function setExists($exists)
    {
        if (is_null($exists)) {
            array_push($this->openAPINullablesSetToNull, 'exists');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exists', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['exists'] = $exists;

        return $this;
    }

    /**
     * Gets mime
     *
     * @return string
     */
    public function getMime()
    {
        return $this->container['mime'];
    }

    /**
     * Sets mime
     *
     * @param string $mime mime
     *
     * @return self
     */
    public function setMime($mime)
    {
        if (is_null($mime)) {
            throw new \InvalidArgumentException('non-nullable mime cannot be null');
        }
        if ((mb_strlen($mime) > 255)) {
            throw new \InvalidArgumentException('invalid length for $mime when calling File., must be smaller than or equal to 255.');
        }

        $this->container['mime'] = $mime;

        return $this;
    }

    /**
     * Gets md5
     *
     * @return string|null
     */
    public function getMd5()
    {
        return $this->container['md5'];
    }

    /**
     * Sets md5
     *
     * @param string|null $md5 md5
     *
     * @return self
     */
    public function setMd5($md5)
    {
        if (is_null($md5)) {
            array_push($this->openAPINullablesSetToNull, 'md5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('md5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($md5) && (mb_strlen($md5) > 32)) {
            throw new \InvalidArgumentException('invalid length for $md5 when calling File., must be smaller than or equal to 32.');
        }

        $this->container['md5'] = $md5;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool|null
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool|null $hidden hidden
     *
     * @return self
     */
    public function setHidden($hidden)
    {
        if (is_null($hidden)) {
            array_push($this->openAPINullablesSetToNull, 'hidden');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hidden', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets accessed
     *
     * @return int
     */
    public function getAccessed()
    {
        return $this->container['accessed'];
    }

    /**
     * Sets accessed
     *
     * @param int $accessed accessed
     *
     * @return self
     */
    public function setAccessed($accessed)
    {
        if (is_null($accessed)) {
            throw new \InvalidArgumentException('non-nullable accessed cannot be null');
        }

        if (($accessed > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $accessed when calling File., must be smaller than or equal to 2147483647.');
        }
        if (($accessed < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $accessed when calling File., must be bigger than or equal to -2147483648.');
        }

        $this->container['accessed'] = $accessed;

        return $this;
    }

    /**
     * Gets scheduled
     *
     * @return bool|null
     */
    public function getScheduled()
    {
        return $this->container['scheduled'];
    }

    /**
     * Sets scheduled
     *
     * @param bool|null $scheduled scheduled
     *
     * @return self
     */
    public function setScheduled($scheduled)
    {
        if (is_null($scheduled)) {
            array_push($this->openAPINullablesSetToNull, 'scheduled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scheduled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scheduled'] = $scheduled;

        return $this;
    }

    /**
     * Gets part_of_list
     *
     * @return bool|null
     */
    public function getPartOfList()
    {
        return $this->container['part_of_list'];
    }

    /**
     * Sets part_of_list
     *
     * @param bool|null $part_of_list part_of_list
     *
     * @return self
     */
    public function setPartOfList($part_of_list)
    {
        if (is_null($part_of_list)) {
            array_push($this->openAPINullablesSetToNull, 'part_of_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('part_of_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['part_of_list'] = $part_of_list;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            array_push($this->openAPINullablesSetToNull, 'created_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets last_played_at
     *
     * @return \DateTime|null
     */
    public function getLastPlayedAt()
    {
        return $this->container['last_played_at'];
    }

    /**
     * Sets last_played_at
     *
     * @param \DateTime|null $last_played_at last_played_at
     *
     * @return self
     */
    public function setLastPlayedAt($last_played_at)
    {
        if (is_null($last_played_at)) {
            array_push($this->openAPINullablesSetToNull, 'last_played_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_played_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_played_at'] = $last_played_at;

        return $this;
    }

    /**
     * Gets bit_rate
     *
     * @return int|null
     */
    public function getBitRate()
    {
        return $this->container['bit_rate'];
    }

    /**
     * Sets bit_rate
     *
     * @param int|null $bit_rate bit_rate
     *
     * @return self
     */
    public function setBitRate($bit_rate)
    {
        if (is_null($bit_rate)) {
            array_push($this->openAPINullablesSetToNull, 'bit_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bit_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($bit_rate) && ($bit_rate > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $bit_rate when calling File., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($bit_rate) && ($bit_rate < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $bit_rate when calling File., must be bigger than or equal to -2147483648.');
        }

        $this->container['bit_rate'] = $bit_rate;

        return $this;
    }

    /**
     * Gets sample_rate
     *
     * @return int|null
     */
    public function getSampleRate()
    {
        return $this->container['sample_rate'];
    }

    /**
     * Sets sample_rate
     *
     * @param int|null $sample_rate sample_rate
     *
     * @return self
     */
    public function setSampleRate($sample_rate)
    {
        if (is_null($sample_rate)) {
            array_push($this->openAPINullablesSetToNull, 'sample_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sample_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($sample_rate) && ($sample_rate > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $sample_rate when calling File., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($sample_rate) && ($sample_rate < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $sample_rate when calling File., must be bigger than or equal to -2147483648.');
        }

        $this->container['sample_rate'] = $sample_rate;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string|null $format format
     *
     * @return self
     */
    public function setFormat($format)
    {
        if (is_null($format)) {
            array_push($this->openAPINullablesSetToNull, 'format');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('format', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($format) && (mb_strlen($format) > 128)) {
            throw new \InvalidArgumentException('invalid length for $format when calling File., must be smaller than or equal to 128.');
        }

        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return int|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param int|null $channels channels
     *
     * @return self
     */
    public function setChannels($channels)
    {
        if (is_null($channels)) {
            array_push($this->openAPINullablesSetToNull, 'channels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($channels) && ($channels > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $channels when calling File., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($channels) && ($channels < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $channels when calling File., must be bigger than or equal to -2147483648.');
        }

        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets length
     *
     * @return string|null
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param string|null $length length
     *
     * @return self
     */
    public function setLength($length)
    {
        if (is_null($length)) {
            array_push($this->openAPINullablesSetToNull, 'length');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('length', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets bpm
     *
     * @return int|null
     */
    public function getBpm()
    {
        return $this->container['bpm'];
    }

    /**
     * Sets bpm
     *
     * @param int|null $bpm bpm
     *
     * @return self
     */
    public function setBpm($bpm)
    {
        if (is_null($bpm)) {
            array_push($this->openAPINullablesSetToNull, 'bpm');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bpm', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($bpm) && ($bpm > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $bpm when calling File., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($bpm) && ($bpm < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $bpm when calling File., must be bigger than or equal to -2147483648.');
        }

        $this->container['bpm'] = $bpm;

        return $this;
    }

    /**
     * Gets replay_gain
     *
     * @return float|null
     */
    public function getReplayGain()
    {
        return $this->container['replay_gain'];
    }

    /**
     * Sets replay_gain
     *
     * @param float|null $replay_gain replay_gain
     *
     * @return self
     */
    public function setReplayGain($replay_gain)
    {
        if (is_null($replay_gain)) {
            array_push($this->openAPINullablesSetToNull, 'replay_gain');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('replay_gain', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($replay_gain) && (!preg_match("/^-?\\d{0,6}(?:\\.\\d{0,2})?$/", ObjectSerializer::toString($replay_gain)))) {
            throw new \InvalidArgumentException("invalid value for \$replay_gain when calling File., must conform to the pattern /^-?\\d{0,6}(?:\\.\\d{0,2})?$/.");
        }

        $this->container['replay_gain'] = $replay_gain;

        return $this;
    }

    /**
     * Gets cue_in
     *
     * @return string|null
     */
    public function getCueIn()
    {
        return $this->container['cue_in'];
    }

    /**
     * Sets cue_in
     *
     * @param string|null $cue_in cue_in
     *
     * @return self
     */
    public function setCueIn($cue_in)
    {
        if (is_null($cue_in)) {
            array_push($this->openAPINullablesSetToNull, 'cue_in');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cue_in', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cue_in'] = $cue_in;

        return $this;
    }

    /**
     * Gets cue_out
     *
     * @return string|null
     */
    public function getCueOut()
    {
        return $this->container['cue_out'];
    }

    /**
     * Sets cue_out
     *
     * @param string|null $cue_out cue_out
     *
     * @return self
     */
    public function setCueOut($cue_out)
    {
        if (is_null($cue_out)) {
            array_push($this->openAPINullablesSetToNull, 'cue_out');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cue_out', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cue_out'] = $cue_out;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling File., must be smaller than or equal to 255.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($description) && (mb_strlen($description) > 512)) {
            throw new \InvalidArgumentException('invalid length for $description when calling File., must be smaller than or equal to 512.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets artwork
     *
     * @return string|null
     */
    public function getArtwork()
    {
        return $this->container['artwork'];
    }

    /**
     * Sets artwork
     *
     * @param string|null $artwork artwork
     *
     * @return self
     */
    public function setArtwork($artwork)
    {
        if (is_null($artwork)) {
            array_push($this->openAPINullablesSetToNull, 'artwork');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('artwork', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($artwork) && (mb_strlen($artwork) > 512)) {
            throw new \InvalidArgumentException('invalid length for $artwork when calling File., must be smaller than or equal to 512.');
        }

        $this->container['artwork'] = $artwork;

        return $this;
    }

    /**
     * Gets artist_name
     *
     * @return string|null
     */
    public function getArtistName()
    {
        return $this->container['artist_name'];
    }

    /**
     * Sets artist_name
     *
     * @param string|null $artist_name artist_name
     *
     * @return self
     */
    public function setArtistName($artist_name)
    {
        if (is_null($artist_name)) {
            array_push($this->openAPINullablesSetToNull, 'artist_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('artist_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($artist_name) && (mb_strlen($artist_name) > 512)) {
            throw new \InvalidArgumentException('invalid length for $artist_name when calling File., must be smaller than or equal to 512.');
        }

        $this->container['artist_name'] = $artist_name;

        return $this;
    }

    /**
     * Gets artist_url
     *
     * @return string|null
     */
    public function getArtistUrl()
    {
        return $this->container['artist_url'];
    }

    /**
     * Sets artist_url
     *
     * @param string|null $artist_url artist_url
     *
     * @return self
     */
    public function setArtistUrl($artist_url)
    {
        if (is_null($artist_url)) {
            array_push($this->openAPINullablesSetToNull, 'artist_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('artist_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($artist_url) && (mb_strlen($artist_url) > 512)) {
            throw new \InvalidArgumentException('invalid length for $artist_url when calling File., must be smaller than or equal to 512.');
        }

        $this->container['artist_url'] = $artist_url;

        return $this;
    }

    /**
     * Gets original_artist
     *
     * @return string|null
     */
    public function getOriginalArtist()
    {
        return $this->container['original_artist'];
    }

    /**
     * Sets original_artist
     *
     * @param string|null $original_artist original_artist
     *
     * @return self
     */
    public function setOriginalArtist($original_artist)
    {
        if (is_null($original_artist)) {
            array_push($this->openAPINullablesSetToNull, 'original_artist');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('original_artist', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($original_artist) && (mb_strlen($original_artist) > 512)) {
            throw new \InvalidArgumentException('invalid length for $original_artist when calling File., must be smaller than or equal to 512.');
        }

        $this->container['original_artist'] = $original_artist;

        return $this;
    }

    /**
     * Gets album_title
     *
     * @return string|null
     */
    public function getAlbumTitle()
    {
        return $this->container['album_title'];
    }

    /**
     * Sets album_title
     *
     * @param string|null $album_title album_title
     *
     * @return self
     */
    public function setAlbumTitle($album_title)
    {
        if (is_null($album_title)) {
            array_push($this->openAPINullablesSetToNull, 'album_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('album_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($album_title) && (mb_strlen($album_title) > 512)) {
            throw new \InvalidArgumentException('invalid length for $album_title when calling File., must be smaller than or equal to 512.');
        }

        $this->container['album_title'] = $album_title;

        return $this;
    }

    /**
     * Gets track_title
     *
     * @return string|null
     */
    public function getTrackTitle()
    {
        return $this->container['track_title'];
    }

    /**
     * Sets track_title
     *
     * @param string|null $track_title track_title
     *
     * @return self
     */
    public function setTrackTitle($track_title)
    {
        if (is_null($track_title)) {
            array_push($this->openAPINullablesSetToNull, 'track_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('track_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($track_title) && (mb_strlen($track_title) > 512)) {
            throw new \InvalidArgumentException('invalid length for $track_title when calling File., must be smaller than or equal to 512.');
        }

        $this->container['track_title'] = $track_title;

        return $this;
    }

    /**
     * Gets genre
     *
     * @return string|null
     */
    public function getGenre()
    {
        return $this->container['genre'];
    }

    /**
     * Sets genre
     *
     * @param string|null $genre genre
     *
     * @return self
     */
    public function setGenre($genre)
    {
        if (is_null($genre)) {
            array_push($this->openAPINullablesSetToNull, 'genre');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('genre', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($genre) && (mb_strlen($genre) > 64)) {
            throw new \InvalidArgumentException('invalid length for $genre when calling File., must be smaller than or equal to 64.');
        }

        $this->container['genre'] = $genre;

        return $this;
    }

    /**
     * Gets mood
     *
     * @return string|null
     */
    public function getMood()
    {
        return $this->container['mood'];
    }

    /**
     * Sets mood
     *
     * @param string|null $mood mood
     *
     * @return self
     */
    public function setMood($mood)
    {
        if (is_null($mood)) {
            array_push($this->openAPINullablesSetToNull, 'mood');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mood', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($mood) && (mb_strlen($mood) > 64)) {
            throw new \InvalidArgumentException('invalid length for $mood when calling File., must be smaller than or equal to 64.');
        }

        $this->container['mood'] = $mood;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date date
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            array_push($this->openAPINullablesSetToNull, 'date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($date) && (mb_strlen($date) > 16)) {
            throw new \InvalidArgumentException('invalid length for $date when calling File., must be smaller than or equal to 16.');
        }

        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets track_number
     *
     * @return int|null
     */
    public function getTrackNumber()
    {
        return $this->container['track_number'];
    }

    /**
     * Sets track_number
     *
     * @param int|null $track_number track_number
     *
     * @return self
     */
    public function setTrackNumber($track_number)
    {
        if (is_null($track_number)) {
            array_push($this->openAPINullablesSetToNull, 'track_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('track_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($track_number) && ($track_number > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $track_number when calling File., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($track_number) && ($track_number < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $track_number when calling File., must be bigger than or equal to -2147483648.');
        }

        $this->container['track_number'] = $track_number;

        return $this;
    }

    /**
     * Gets disc_number
     *
     * @return string|null
     */
    public function getDiscNumber()
    {
        return $this->container['disc_number'];
    }

    /**
     * Sets disc_number
     *
     * @param string|null $disc_number disc_number
     *
     * @return self
     */
    public function setDiscNumber($disc_number)
    {
        if (is_null($disc_number)) {
            array_push($this->openAPINullablesSetToNull, 'disc_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('disc_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($disc_number) && (mb_strlen($disc_number) > 8)) {
            throw new \InvalidArgumentException('invalid length for $disc_number when calling File., must be smaller than or equal to 8.');
        }

        $this->container['disc_number'] = $disc_number;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            array_push($this->openAPINullablesSetToNull, 'comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            array_push($this->openAPINullablesSetToNull, 'language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($language) && (mb_strlen($language) > 512)) {
            throw new \InvalidArgumentException('invalid length for $language when calling File., must be smaller than or equal to 512.');
        }

        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            array_push($this->openAPINullablesSetToNull, 'label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($label) && (mb_strlen($label) > 512)) {
            throw new \InvalidArgumentException('invalid length for $label when calling File., must be smaller than or equal to 512.');
        }

        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets copyright
     *
     * @return string|null
     */
    public function getCopyright()
    {
        return $this->container['copyright'];
    }

    /**
     * Sets copyright
     *
     * @param string|null $copyright copyright
     *
     * @return self
     */
    public function setCopyright($copyright)
    {
        if (is_null($copyright)) {
            array_push($this->openAPINullablesSetToNull, 'copyright');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('copyright', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($copyright) && (mb_strlen($copyright) > 512)) {
            throw new \InvalidArgumentException('invalid length for $copyright when calling File., must be smaller than or equal to 512.');
        }

        $this->container['copyright'] = $copyright;

        return $this;
    }

    /**
     * Gets composer
     *
     * @return string|null
     */
    public function getComposer()
    {
        return $this->container['composer'];
    }

    /**
     * Sets composer
     *
     * @param string|null $composer composer
     *
     * @return self
     */
    public function setComposer($composer)
    {
        if (is_null($composer)) {
            array_push($this->openAPINullablesSetToNull, 'composer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('composer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($composer) && (mb_strlen($composer) > 512)) {
            throw new \InvalidArgumentException('invalid length for $composer when calling File., must be smaller than or equal to 512.');
        }

        $this->container['composer'] = $composer;

        return $this;
    }

    /**
     * Gets conductor
     *
     * @return string|null
     */
    public function getConductor()
    {
        return $this->container['conductor'];
    }

    /**
     * Sets conductor
     *
     * @param string|null $conductor conductor
     *
     * @return self
     */
    public function setConductor($conductor)
    {
        if (is_null($conductor)) {
            array_push($this->openAPINullablesSetToNull, 'conductor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('conductor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($conductor) && (mb_strlen($conductor) > 512)) {
            throw new \InvalidArgumentException('invalid length for $conductor when calling File., must be smaller than or equal to 512.');
        }

        $this->container['conductor'] = $conductor;

        return $this;
    }

    /**
     * Gets orchestra
     *
     * @return string|null
     */
    public function getOrchestra()
    {
        return $this->container['orchestra'];
    }

    /**
     * Sets orchestra
     *
     * @param string|null $orchestra orchestra
     *
     * @return self
     */
    public function setOrchestra($orchestra)
    {
        if (is_null($orchestra)) {
            array_push($this->openAPINullablesSetToNull, 'orchestra');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orchestra', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($orchestra) && (mb_strlen($orchestra) > 512)) {
            throw new \InvalidArgumentException('invalid length for $orchestra when calling File., must be smaller than or equal to 512.');
        }

        $this->container['orchestra'] = $orchestra;

        return $this;
    }

    /**
     * Gets encoder
     *
     * @return string|null
     */
    public function getEncoder()
    {
        return $this->container['encoder'];
    }

    /**
     * Sets encoder
     *
     * @param string|null $encoder encoder
     *
     * @return self
     */
    public function setEncoder($encoder)
    {
        if (is_null($encoder)) {
            array_push($this->openAPINullablesSetToNull, 'encoder');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('encoder', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($encoder) && (mb_strlen($encoder) > 64)) {
            throw new \InvalidArgumentException('invalid length for $encoder when calling File., must be smaller than or equal to 64.');
        }

        $this->container['encoder'] = $encoder;

        return $this;
    }

    /**
     * Gets encoded_by
     *
     * @return string|null
     */
    public function getEncodedBy()
    {
        return $this->container['encoded_by'];
    }

    /**
     * Sets encoded_by
     *
     * @param string|null $encoded_by encoded_by
     *
     * @return self
     */
    public function setEncodedBy($encoded_by)
    {
        if (is_null($encoded_by)) {
            array_push($this->openAPINullablesSetToNull, 'encoded_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('encoded_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($encoded_by) && (mb_strlen($encoded_by) > 255)) {
            throw new \InvalidArgumentException('invalid length for $encoded_by when calling File., must be smaller than or equal to 255.');
        }

        $this->container['encoded_by'] = $encoded_by;

        return $this;
    }

    /**
     * Gets isrc
     *
     * @return string|null
     */
    public function getIsrc()
    {
        return $this->container['isrc'];
    }

    /**
     * Sets isrc
     *
     * @param string|null $isrc isrc
     *
     * @return self
     */
    public function setIsrc($isrc)
    {
        if (is_null($isrc)) {
            array_push($this->openAPINullablesSetToNull, 'isrc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isrc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($isrc) && (mb_strlen($isrc) > 512)) {
            throw new \InvalidArgumentException('invalid length for $isrc when calling File., must be smaller than or equal to 512.');
        }

        $this->container['isrc'] = $isrc;

        return $this;
    }

    /**
     * Gets lyrics
     *
     * @return string|null
     */
    public function getLyrics()
    {
        return $this->container['lyrics'];
    }

    /**
     * Sets lyrics
     *
     * @param string|null $lyrics lyrics
     *
     * @return self
     */
    public function setLyrics($lyrics)
    {
        if (is_null($lyrics)) {
            array_push($this->openAPINullablesSetToNull, 'lyrics');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lyrics', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lyrics'] = $lyrics;

        return $this;
    }

    /**
     * Gets lyricist
     *
     * @return string|null
     */
    public function getLyricist()
    {
        return $this->container['lyricist'];
    }

    /**
     * Sets lyricist
     *
     * @param string|null $lyricist lyricist
     *
     * @return self
     */
    public function setLyricist($lyricist)
    {
        if (is_null($lyricist)) {
            array_push($this->openAPINullablesSetToNull, 'lyricist');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lyricist', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($lyricist) && (mb_strlen($lyricist) > 512)) {
            throw new \InvalidArgumentException('invalid length for $lyricist when calling File., must be smaller than or equal to 512.');
        }

        $this->container['lyricist'] = $lyricist;

        return $this;
    }

    /**
     * Gets original_lyricist
     *
     * @return string|null
     */
    public function getOriginalLyricist()
    {
        return $this->container['original_lyricist'];
    }

    /**
     * Sets original_lyricist
     *
     * @param string|null $original_lyricist original_lyricist
     *
     * @return self
     */
    public function setOriginalLyricist($original_lyricist)
    {
        if (is_null($original_lyricist)) {
            array_push($this->openAPINullablesSetToNull, 'original_lyricist');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('original_lyricist', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($original_lyricist) && (mb_strlen($original_lyricist) > 512)) {
            throw new \InvalidArgumentException('invalid length for $original_lyricist when calling File., must be smaller than or equal to 512.');
        }

        $this->container['original_lyricist'] = $original_lyricist;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject subject
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            array_push($this->openAPINullablesSetToNull, 'subject');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subject', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($subject) && (mb_strlen($subject) > 512)) {
            throw new \InvalidArgumentException('invalid length for $subject when calling File., must be smaller than or equal to 512.');
        }

        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets contributor
     *
     * @return string|null
     */
    public function getContributor()
    {
        return $this->container['contributor'];
    }

    /**
     * Sets contributor
     *
     * @param string|null $contributor contributor
     *
     * @return self
     */
    public function setContributor($contributor)
    {
        if (is_null($contributor)) {
            array_push($this->openAPINullablesSetToNull, 'contributor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contributor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contributor) && (mb_strlen($contributor) > 512)) {
            throw new \InvalidArgumentException('invalid length for $contributor when calling File., must be smaller than or equal to 512.');
        }

        $this->container['contributor'] = $contributor;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return string|null
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param string|null $rating rating
     *
     * @return self
     */
    public function setRating($rating)
    {
        if (is_null($rating)) {
            array_push($this->openAPINullablesSetToNull, 'rating');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rating', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($rating) && (mb_strlen($rating) > 8)) {
            throw new \InvalidArgumentException('invalid length for $rating when calling File., must be smaller than or equal to 8.');
        }

        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            array_push($this->openAPINullablesSetToNull, 'url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($url) && (mb_strlen($url) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $url when calling File., must be smaller than or equal to 1024.');
        }

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets info_url
     *
     * @return string|null
     */
    public function getInfoUrl()
    {
        return $this->container['info_url'];
    }

    /**
     * Sets info_url
     *
     * @param string|null $info_url info_url
     *
     * @return self
     */
    public function setInfoUrl($info_url)
    {
        if (is_null($info_url)) {
            array_push($this->openAPINullablesSetToNull, 'info_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('info_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($info_url) && (mb_strlen($info_url) > 512)) {
            throw new \InvalidArgumentException('invalid length for $info_url when calling File., must be smaller than or equal to 512.');
        }

        $this->container['info_url'] = $info_url;

        return $this;
    }

    /**
     * Gets audio_source_url
     *
     * @return string|null
     */
    public function getAudioSourceUrl()
    {
        return $this->container['audio_source_url'];
    }

    /**
     * Sets audio_source_url
     *
     * @param string|null $audio_source_url audio_source_url
     *
     * @return self
     */
    public function setAudioSourceUrl($audio_source_url)
    {
        if (is_null($audio_source_url)) {
            array_push($this->openAPINullablesSetToNull, 'audio_source_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('audio_source_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($audio_source_url) && (mb_strlen($audio_source_url) > 512)) {
            throw new \InvalidArgumentException('invalid length for $audio_source_url when calling File., must be smaller than or equal to 512.');
        }

        $this->container['audio_source_url'] = $audio_source_url;

        return $this;
    }

    /**
     * Gets buy_this_url
     *
     * @return string|null
     */
    public function getBuyThisUrl()
    {
        return $this->container['buy_this_url'];
    }

    /**
     * Sets buy_this_url
     *
     * @param string|null $buy_this_url buy_this_url
     *
     * @return self
     */
    public function setBuyThisUrl($buy_this_url)
    {
        if (is_null($buy_this_url)) {
            array_push($this->openAPINullablesSetToNull, 'buy_this_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buy_this_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($buy_this_url) && (mb_strlen($buy_this_url) > 512)) {
            throw new \InvalidArgumentException('invalid length for $buy_this_url when calling File., must be smaller than or equal to 512.');
        }

        $this->container['buy_this_url'] = $buy_this_url;

        return $this;
    }

    /**
     * Gets catalog_number
     *
     * @return string|null
     */
    public function getCatalogNumber()
    {
        return $this->container['catalog_number'];
    }

    /**
     * Sets catalog_number
     *
     * @param string|null $catalog_number catalog_number
     *
     * @return self
     */
    public function setCatalogNumber($catalog_number)
    {
        if (is_null($catalog_number)) {
            array_push($this->openAPINullablesSetToNull, 'catalog_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('catalog_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($catalog_number) && (mb_strlen($catalog_number) > 512)) {
            throw new \InvalidArgumentException('invalid length for $catalog_number when calling File., must be smaller than or equal to 512.');
        }

        $this->container['catalog_number'] = $catalog_number;

        return $this;
    }

    /**
     * Gets radio_station_name
     *
     * @return string|null
     */
    public function getRadioStationName()
    {
        return $this->container['radio_station_name'];
    }

    /**
     * Sets radio_station_name
     *
     * @param string|null $radio_station_name radio_station_name
     *
     * @return self
     */
    public function setRadioStationName($radio_station_name)
    {
        if (is_null($radio_station_name)) {
            array_push($this->openAPINullablesSetToNull, 'radio_station_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('radio_station_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($radio_station_name) && (mb_strlen($radio_station_name) > 512)) {
            throw new \InvalidArgumentException('invalid length for $radio_station_name when calling File., must be smaller than or equal to 512.');
        }

        $this->container['radio_station_name'] = $radio_station_name;

        return $this;
    }

    /**
     * Gets radio_station_url
     *
     * @return string|null
     */
    public function getRadioStationUrl()
    {
        return $this->container['radio_station_url'];
    }

    /**
     * Sets radio_station_url
     *
     * @param string|null $radio_station_url radio_station_url
     *
     * @return self
     */
    public function setRadioStationUrl($radio_station_url)
    {
        if (is_null($radio_station_url)) {
            array_push($this->openAPINullablesSetToNull, 'radio_station_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('radio_station_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($radio_station_url) && (mb_strlen($radio_station_url) > 512)) {
            throw new \InvalidArgumentException('invalid length for $radio_station_url when calling File., must be smaller than or equal to 512.');
        }

        $this->container['radio_station_url'] = $radio_station_url;

        return $this;
    }

    /**
     * Gets report_datetime
     *
     * @return string|null
     */
    public function getReportDatetime()
    {
        return $this->container['report_datetime'];
    }

    /**
     * Sets report_datetime
     *
     * @param string|null $report_datetime report_datetime
     *
     * @return self
     */
    public function setReportDatetime($report_datetime)
    {
        if (is_null($report_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'report_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($report_datetime) && (mb_strlen($report_datetime) > 32)) {
            throw new \InvalidArgumentException('invalid length for $report_datetime when calling File., must be smaller than or equal to 32.');
        }

        $this->container['report_datetime'] = $report_datetime;

        return $this;
    }

    /**
     * Gets report_location
     *
     * @return string|null
     */
    public function getReportLocation()
    {
        return $this->container['report_location'];
    }

    /**
     * Sets report_location
     *
     * @param string|null $report_location report_location
     *
     * @return self
     */
    public function setReportLocation($report_location)
    {
        if (is_null($report_location)) {
            array_push($this->openAPINullablesSetToNull, 'report_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($report_location) && (mb_strlen($report_location) > 512)) {
            throw new \InvalidArgumentException('invalid length for $report_location when calling File., must be smaller than or equal to 512.');
        }

        $this->container['report_location'] = $report_location;

        return $this;
    }

    /**
     * Gets report_organization
     *
     * @return string|null
     */
    public function getReportOrganization()
    {
        return $this->container['report_organization'];
    }

    /**
     * Sets report_organization
     *
     * @param string|null $report_organization report_organization
     *
     * @return self
     */
    public function setReportOrganization($report_organization)
    {
        if (is_null($report_organization)) {
            array_push($this->openAPINullablesSetToNull, 'report_organization');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_organization', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($report_organization) && (mb_strlen($report_organization) > 512)) {
            throw new \InvalidArgumentException('invalid length for $report_organization when calling File., must be smaller than or equal to 512.');
        }

        $this->container['report_organization'] = $report_organization;

        return $this;
    }

    /**
     * Gets library
     *
     * @return int|null
     */
    public function getLibrary()
    {
        return $this->container['library'];
    }

    /**
     * Sets library
     *
     * @param int|null $library library
     *
     * @return self
     */
    public function setLibrary($library)
    {
        if (is_null($library)) {
            array_push($this->openAPINullablesSetToNull, 'library');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('library', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['library'] = $library;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return int|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param int|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            array_push($this->openAPINullablesSetToNull, 'owner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('owner', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets edited_by
     *
     * @return int|null
     */
    public function getEditedBy()
    {
        return $this->container['edited_by'];
    }

    /**
     * Sets edited_by
     *
     * @param int|null $edited_by edited_by
     *
     * @return self
     */
    public function setEditedBy($edited_by)
    {
        if (is_null($edited_by)) {
            array_push($this->openAPINullablesSetToNull, 'edited_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('edited_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['edited_by'] = $edited_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


