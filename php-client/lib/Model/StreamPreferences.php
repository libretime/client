<?php
/**
 * StreamPreferences
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Libretime\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * LibreTime API
 *
 * Radio Broadcast & Automation Platform
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Libretime\Client\Model;

use \ArrayAccess;
use \Libretime\Client\ObjectSerializer;

/**
 * StreamPreferences Class Doc Comment
 *
 * @category Class
 * @package  Libretime\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StreamPreferences implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StreamPreferences';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'input_fade_transition' => 'float',
        'message_format' => 'int',
        'message_offline' => 'string',
        'replay_gain_enabled' => 'bool',
        'replay_gain_offset' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'input_fade_transition' => 'double',
        'message_format' => null,
        'message_offline' => null,
        'replay_gain_enabled' => null,
        'replay_gain_offset' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'input_fade_transition' => false,
        'message_format' => false,
        'message_offline' => false,
        'replay_gain_enabled' => false,
        'replay_gain_offset' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'input_fade_transition' => 'input_fade_transition',
        'message_format' => 'message_format',
        'message_offline' => 'message_offline',
        'replay_gain_enabled' => 'replay_gain_enabled',
        'replay_gain_offset' => 'replay_gain_offset'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'input_fade_transition' => 'setInputFadeTransition',
        'message_format' => 'setMessageFormat',
        'message_offline' => 'setMessageOffline',
        'replay_gain_enabled' => 'setReplayGainEnabled',
        'replay_gain_offset' => 'setReplayGainOffset'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'input_fade_transition' => 'getInputFadeTransition',
        'message_format' => 'getMessageFormat',
        'message_offline' => 'getMessageOffline',
        'replay_gain_enabled' => 'getReplayGainEnabled',
        'replay_gain_offset' => 'getReplayGainOffset'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('input_fade_transition', $data ?? [], null);
        $this->setIfExists('message_format', $data ?? [], null);
        $this->setIfExists('message_offline', $data ?? [], null);
        $this->setIfExists('replay_gain_enabled', $data ?? [], null);
        $this->setIfExists('replay_gain_offset', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['input_fade_transition'] === null) {
            $invalidProperties[] = "'input_fade_transition' can't be null";
        }
        if ($this->container['message_format'] === null) {
            $invalidProperties[] = "'message_format' can't be null";
        }
        if ($this->container['message_offline'] === null) {
            $invalidProperties[] = "'message_offline' can't be null";
        }
        if ($this->container['replay_gain_enabled'] === null) {
            $invalidProperties[] = "'replay_gain_enabled' can't be null";
        }
        if ($this->container['replay_gain_offset'] === null) {
            $invalidProperties[] = "'replay_gain_offset' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets input_fade_transition
     *
     * @return float
     */
    public function getInputFadeTransition()
    {
        return $this->container['input_fade_transition'];
    }

    /**
     * Sets input_fade_transition
     *
     * @param float $input_fade_transition input_fade_transition
     *
     * @return self
     */
    public function setInputFadeTransition($input_fade_transition)
    {
        if (is_null($input_fade_transition)) {
            throw new \InvalidArgumentException('non-nullable input_fade_transition cannot be null');
        }
        $this->container['input_fade_transition'] = $input_fade_transition;

        return $this;
    }

    /**
     * Gets message_format
     *
     * @return int
     */
    public function getMessageFormat()
    {
        return $this->container['message_format'];
    }

    /**
     * Sets message_format
     *
     * @param int $message_format message_format
     *
     * @return self
     */
    public function setMessageFormat($message_format)
    {
        if (is_null($message_format)) {
            throw new \InvalidArgumentException('non-nullable message_format cannot be null');
        }
        $this->container['message_format'] = $message_format;

        return $this;
    }

    /**
     * Gets message_offline
     *
     * @return string
     */
    public function getMessageOffline()
    {
        return $this->container['message_offline'];
    }

    /**
     * Sets message_offline
     *
     * @param string $message_offline message_offline
     *
     * @return self
     */
    public function setMessageOffline($message_offline)
    {
        if (is_null($message_offline)) {
            throw new \InvalidArgumentException('non-nullable message_offline cannot be null');
        }
        $this->container['message_offline'] = $message_offline;

        return $this;
    }

    /**
     * Gets replay_gain_enabled
     *
     * @return bool
     */
    public function getReplayGainEnabled()
    {
        return $this->container['replay_gain_enabled'];
    }

    /**
     * Sets replay_gain_enabled
     *
     * @param bool $replay_gain_enabled replay_gain_enabled
     *
     * @return self
     */
    public function setReplayGainEnabled($replay_gain_enabled)
    {
        if (is_null($replay_gain_enabled)) {
            throw new \InvalidArgumentException('non-nullable replay_gain_enabled cannot be null');
        }
        $this->container['replay_gain_enabled'] = $replay_gain_enabled;

        return $this;
    }

    /**
     * Gets replay_gain_offset
     *
     * @return float
     */
    public function getReplayGainOffset()
    {
        return $this->container['replay_gain_offset'];
    }

    /**
     * Sets replay_gain_offset
     *
     * @param float $replay_gain_offset replay_gain_offset
     *
     * @return self
     */
    public function setReplayGainOffset($replay_gain_offset)
    {
        if (is_null($replay_gain_offset)) {
            throw new \InvalidArgumentException('non-nullable replay_gain_offset cannot be null');
        }
        $this->container['replay_gain_offset'] = $replay_gain_offset;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


